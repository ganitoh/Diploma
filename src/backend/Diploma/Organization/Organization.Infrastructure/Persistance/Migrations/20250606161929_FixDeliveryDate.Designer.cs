// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Organization.Infrastructure.Persistance.Context;

#nullable disable

namespace Organization.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(OrganizationDbContext))]
    [Migration("20250606161929_FixDeliveryDate")]
    partial class FixDeliveryDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Organization.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerOrganizationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SellerOrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BuyerOrganizationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerOrganizationId");

                    b.ToTable("order", "organization");
                });

            modelBuilder.Entity("Organization.Domain.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("LegalAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("organization", "organization");
                });

            modelBuilder.Entity("Organization.Domain.Models.OrganizationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organizationuser", "organization");
                });

            modelBuilder.Entity("Organization.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsStock")
                        .HasColumnType("boolean");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SellOrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellOrganizationId");

                    b.ToTable("product", "organization");
                });

            modelBuilder.Entity("Organization.Domain.Models.Order", b =>
                {
                    b.HasOne("Organization.Domain.Models.Organization", "BuyerOrganization")
                        .WithMany("BuyOrders")
                        .HasForeignKey("BuyerOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Organization.Domain.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Organization.Domain.Models.Organization", "SellerOrganization")
                        .WithMany("SellOrders")
                        .HasForeignKey("SellerOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerOrganization");

                    b.Navigation("Product");

                    b.Navigation("SellerOrganization");
                });

            modelBuilder.Entity("Organization.Domain.Models.OrganizationUser", b =>
                {
                    b.HasOne("Organization.Domain.Models.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Organization.Domain.Models.Product", b =>
                {
                    b.HasOne("Organization.Domain.Models.Organization", "SellOrganization")
                        .WithMany("Products")
                        .HasForeignKey("SellOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellOrganization");
                });

            modelBuilder.Entity("Organization.Domain.Models.Organization", b =>
                {
                    b.Navigation("BuyOrders");

                    b.Navigation("OrganizationUsers");

                    b.Navigation("Products");

                    b.Navigation("SellOrders");
                });

            modelBuilder.Entity("Organization.Domain.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
